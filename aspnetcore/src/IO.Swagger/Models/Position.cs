/*
 * Phoenix Payroll API
 *
 * design and build great web apis
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Position : IEquatable<Position>
    { 
        /// <summary>
        /// Gets or Sets PositionIdentifier
        /// </summary>
        [DataMember(Name="positionIdentifier")]
        public decimal? PositionIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets HandleCode
        /// </summary>
        [DataMember(Name="handle-code")]
        public string HandleCode { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DateStarted
        /// </summary>
        [DataMember(Name="date-started")]
        public string DateStarted { get; set; }

        /// <summary>
        /// Gets or Sets DateClosed
        /// </summary>
        [DataMember(Name="date-closed")]
        public string DateClosed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  PositionIdentifier: ").Append(PositionIdentifier).Append("\n");
            sb.Append("  HandleCode: ").Append(HandleCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DateStarted: ").Append(DateStarted).Append("\n");
            sb.Append("  DateClosed: ").Append(DateClosed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Position)obj);
        }

        /// <summary>
        /// Returns true if Position instances are equal
        /// </summary>
        /// <param name="other">Instance of Position to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Position other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PositionIdentifier == other.PositionIdentifier ||
                    PositionIdentifier != null &&
                    PositionIdentifier.Equals(other.PositionIdentifier)
                ) && 
                (
                    HandleCode == other.HandleCode ||
                    HandleCode != null &&
                    HandleCode.Equals(other.HandleCode)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DateStarted == other.DateStarted ||
                    DateStarted != null &&
                    DateStarted.Equals(other.DateStarted)
                ) && 
                (
                    DateClosed == other.DateClosed ||
                    DateClosed != null &&
                    DateClosed.Equals(other.DateClosed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PositionIdentifier != null)
                    hashCode = hashCode * 59 + PositionIdentifier.GetHashCode();
                    if (HandleCode != null)
                    hashCode = hashCode * 59 + HandleCode.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (DateStarted != null)
                    hashCode = hashCode * 59 + DateStarted.GetHashCode();
                    if (DateClosed != null)
                    hashCode = hashCode * 59 + DateClosed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Position left, Position right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Position left, Position right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
